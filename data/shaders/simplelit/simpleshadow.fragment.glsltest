#ifdef GL_ES 
precision mediump float;
#endif
uniform sampler2D u_shadowMap0;
uniform sampler2D u_shadowMap1;
uniform sampler2D u_shadowMap2;
uniform sampler2D u_shadowMap3;

varying vec4 v_shadowMapUv0;
varying vec4 v_shadowMapUv1;
varying vec4 v_shadowMapUv2;
varying vec4 v_shadowMapUv3;

varying vec2 v_texCoord0;
varying vec4 norm;
varying vec4 vert;
varying vec4 lightV;
uniform int u_flipY;
uniform sampler2D u_normalMap;
uniform sampler2D u_leafTexture;
uniform vec3 u_lightColor;
uniform float u_alphaDiscard;
uniform float u_fogStart;
uniform float u_fogEnd;
uniform vec3 u_fogColor;
uniform int u_useNormalMap;
uniform vec4 u_splits;

float random(vec4 seed4) {
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
    return fract(sin(dot_product) * 43758.5453);
}



float getShadowness(int idx, vec2 offset)
{
	
	vec4 sCoord;
	
	
    const vec4 bitShifts = vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0);
	
	float result;
	//if (idx == 0) {
		
		sCoord = v_shadowMapUv0;
		result = step(sCoord.z+0.001, dot(texture2D(u_shadowMap0, sCoord.xy + offset), bitShifts));
	/*} else if (idx == 1) {

		sCoord = v_shadowMapUv1;
		result = step(sCoord.z+0.001, dot(texture2D(u_shadowMap1, sCoord.xy + offset), bitShifts));
	} else if (idx == 2) {
		
		sCoord = v_shadowMapUv2;
		result = step(sCoord.z+0.001, dot(texture2D(u_shadowMap2, sCoord.xy + offset), bitShifts));
	} else {
		
		sCoord = v_shadowMapUv3;
		result = step(sCoord.z+0.001, dot(texture2D(u_shadowMap3, sCoord.xy + offset), bitShifts));
	}*/
	
    return result;//+(1.0/255.0));	
	
	
	
	//float visibility = 1.0;
	//if ( dot(texture2D( u_shadowMap, v_shadowMapUv.xy ), bitShifts)  <  v_shadowMapUv.z+0.0005){
	//	visibility = 0.5;
	//}
	//return visibility;
}

float getShadow(int idx) 
{
	vec2 pcf0 = vec2( 0.001, 0.001 );
vec2 pcf1 = vec2( 0.001, -0.0001 );
vec2 pcf2 = vec2( -0.0003, -0.0006);
vec2 pcf3 = vec2( -0.0002, 0.001 );

	float shadowVal = ( getShadowness(idx, vec2(0.0, 0.0)) + getShadowness(idx, pcf0) +
			getShadowness(idx, pcf1) +
			getShadowness(idx, pcf2) +
			getShadowness(idx, pcf3)) * 0.20;
	
	return shadowVal ;
}

void main() {
	if (u_flipY != 1) {
		gl_FragColor = texture2D(u_leafTexture, vec2(v_texCoord0.x, v_texCoord0.y));
	} else {
		gl_FragColor = texture2D(u_leafTexture, vec2(v_texCoord0.x, -v_texCoord0.y));
	}
	if (gl_FragColor.a < u_alphaDiscard) {
		discard;
	}
	vec3 n = normalize(norm.xyz);
	
	vec3 l = normalize(-lightV.xyz);
	vec3 v = normalize(vert.xyz);
	vec3 h = normalize(l-n);
	float nDotl = max(0.0, dot(n, l));
	float nDotv = max(0.0, dot(n, v));
	if (u_useNormalMap == 1) {
		vec4 normalColor = texture2D(u_normalMap, v_texCoord0);
		vec3 newN = (2.0*normalColor.rgb)-1.0;
		vec3 n2 = normalize(newN);
		float normV = max(0.0, dot(n2, 1.0-v));
		gl_FragColor.rgb *= normV;
	}
	
	
	
	
	float avg = nDotl+nDotv;
	avg /= 2.0;

	float dist = gl_FragCoord.z/gl_FragCoord.w; 
	int index = 0;
	if (dist < 40.0) {
		gl_FragColor.rgb = vec3(0.0, 1.0, 0.0);
		index = 0;
	} else if (dist > 25.0 && dist < 50.0){
		gl_FragColor.rgb = vec3(1.0, 0.0, 0.0);
		index = 1;
	} else if (dist > 50.0 && dist < 75.0){
		gl_FragColor.rgb = vec3(0.0, 0.0, 1.0);
		index = 2;
	} else {
		gl_FragColor.rgb = vec3(1.0, 1.0, 0.0);
		index = 3;
	}
	
	
	float fogFactor = (u_fogEnd - dist)/(u_fogEnd - u_fogStart);
	fogFactor = clamp( fogFactor, 0.0, 1.0 );
	
	
	//gl_FragColor.rgb = vec3(dist);
	//gl_FragColor.rgb *= vec3(avg)*vec3(1.0);//vec3(0.2, 0.5, 0.8);
	
	//for (int i = 0; i < 7; i++) {
		gl_FragColor.rgb = vec3(getShadow(index));
	//}
		
	
	
}